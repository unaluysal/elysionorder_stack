// <auto-generated />
using System;
using ElysionOrder.Infrastructure.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ElysionOrder.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ElysionOrderDbContext))]
    [Migration("20231109171620_bt1")]
    partial class bt1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("ElysionOrder")
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ElysionOrder.Domain.Entitys.Bill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(1);

                    b.Property<int>("BillNumber")
                        .HasColumnType("integer");

                    b.Property<Guid>("BillTypeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(2);

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(3);

                    b.Property<Guid>("SalesId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean")
                        .HasColumnOrder(7);

                    b.Property<Guid>("TenatId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(6);

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(4);

                    b.Property<Guid?>("UpdateUserId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("BillTypeId");

                    b.HasIndex("SalesId");

                    b.ToTable("Bills", "ElysionOrder");
                });

            modelBuilder.Entity("ElysionOrder.Domain.Entitys.BillSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(2);

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(3);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NextPageNumber")
                        .HasColumnType("integer");

                    b.Property<double>("PaperWeight")
                        .HasColumnType("double precision");

                    b.Property<double>("PaperWidth")
                        .HasColumnType("double precision");

                    b.Property<string>("PrinterName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean")
                        .HasColumnOrder(7);

                    b.Property<Guid>("TenatId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(6);

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(4);

                    b.Property<Guid?>("UpdateUserId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.ToTable("BillSettings", "ElysionOrder");
                });

            modelBuilder.Entity("ElysionOrder.Domain.Entitys.BillType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(2);

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(3);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean")
                        .HasColumnOrder(7);

                    b.Property<Guid>("TenatId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(6);

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(4);

                    b.Property<Guid?>("UpdateUserId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.ToTable("BillTypes", "ElysionOrder");
                });

            modelBuilder.Entity("ElysionOrder.Domain.Entitys.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(2);

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(3);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean")
                        .HasColumnOrder(7);

                    b.Property<Guid>("TenatId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(6);

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(4);

                    b.Property<Guid?>("UpdateUserId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.ToTable("Brands", "ElysionOrder");
                });

            modelBuilder.Entity("ElysionOrder.Domain.Entitys.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(2);

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(3);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EBillRole")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean")
                        .HasColumnOrder(7);

                    b.Property<string>("TaxNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TaxOffice")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TenatId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(6);

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(4);

                    b.Property<Guid?>("UpdateUserId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(5);

                    b.Property<string>("WebSite")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Companys", "ElysionOrder");
                });

            modelBuilder.Entity("ElysionOrder.Domain.Entitys.Currency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(2);

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(3);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean")
                        .HasColumnOrder(7);

                    b.Property<Guid>("TenatId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(6);

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(4);

                    b.Property<Guid?>("UpdateUserId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.ToTable("Currencies", "ElysionOrder");
                });

            modelBuilder.Entity("ElysionOrder.Domain.Entitys.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BillingAddRess")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(2);

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(3);

                    b.Property<int>("CustomerNumber")
                        .HasColumnType("integer");

                    b.Property<Guid>("CustomerTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean")
                        .HasColumnOrder(7);

                    b.Property<string>("TaxNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TaxOffice")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TenatId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(6);

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(4);

                    b.Property<Guid?>("UpdateUserId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("CustomerTypeId");

                    b.ToTable("Customers", "ElysionOrder");
                });

            modelBuilder.Entity("ElysionOrder.Domain.Entitys.CustomerType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(2);

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(3);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean")
                        .HasColumnOrder(7);

                    b.Property<Guid>("TenatId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(6);

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(4);

                    b.Property<Guid?>("UpdateUserId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.ToTable("CustomerTypes", "ElysionOrder");
                });

            modelBuilder.Entity("ElysionOrder.Domain.Entitys.DayOfWeek", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(2);

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(3);

                    b.Property<int>("DayNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean")
                        .HasColumnOrder(7);

                    b.Property<Guid>("TenatId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(6);

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(4);

                    b.Property<Guid?>("UpdateUserId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.ToTable("DayOfWeeks", "ElysionOrder");
                });

            modelBuilder.Entity("ElysionOrder.Domain.Entitys.EBillSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(1);

                    b.Property<string>("ApplicationName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ChannelName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Compressed")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(2);

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(3);

                    b.Property<string>("HostName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean")
                        .HasColumnOrder(7);

                    b.Property<Guid>("TenatId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(6);

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(4);

                    b.Property<Guid?>("UpdateUserId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(5);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EBillSettings", "ElysionOrder");
                });

            modelBuilder.Entity("ElysionOrder.Domain.Entitys.Iban", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(2);

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(3);

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IbanAdres")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean")
                        .HasColumnOrder(7);

                    b.Property<Guid>("TenatId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(6);

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(4);

                    b.Property<Guid?>("UpdateUserId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.ToTable("Ibans", "ElysionOrder");
                });

            modelBuilder.Entity("ElysionOrder.Domain.Entitys.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(2);

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(3);

                    b.Property<double>("Discount")
                        .HasColumnType("double precision");

                    b.Property<int>("Piece")
                        .HasColumnType("integer");

                    b.Property<Guid>("PriceListId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SalesId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean")
                        .HasColumnOrder(7);

                    b.Property<Guid>("TenatId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(6);

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(4);

                    b.Property<Guid?>("UpdateUserId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("PriceListId");

                    b.HasIndex("SalesId");

                    b.ToTable("Orders", "ElysionOrder");
                });

            modelBuilder.Entity("ElysionOrder.Domain.Entitys.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(2);

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(3);

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PaymentTypeId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean")
                        .HasColumnOrder(7);

                    b.Property<Guid>("TenatId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(6);

                    b.Property<double>("Total")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(4);

                    b.Property<Guid?>("UpdateUserId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PaymentTypeId");

                    b.ToTable("Payments", "ElysionOrder");
                });

            modelBuilder.Entity("ElysionOrder.Domain.Entitys.PaymentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(2);

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(3);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean")
                        .HasColumnOrder(7);

                    b.Property<Guid>("TenatId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(6);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(4);

                    b.Property<Guid?>("UpdateUserId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.ToTable("PaymentTypes", "ElysionOrder");
                });

            modelBuilder.Entity("ElysionOrder.Domain.Entitys.PriceList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(2);

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(3);

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("uuid");

                    b.Property<double>("Discount")
                        .HasColumnType("double precision");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<Guid>("PriceListTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean")
                        .HasColumnOrder(7);

                    b.Property<Guid>("TaxId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TenatId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(6);

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(4);

                    b.Property<Guid?>("UpdateUserId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("PriceListTypeId");

                    b.HasIndex("ProductId");

                    b.HasIndex("TaxId");

                    b.ToTable("PriceLists", "ElysionOrder");
                });

            modelBuilder.Entity("ElysionOrder.Domain.Entitys.PriceListType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(2);

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(3);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean")
                        .HasColumnOrder(7);

                    b.Property<Guid>("TenatId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(6);

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(4);

                    b.Property<Guid?>("UpdateUserId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.ToTable("PriceListTypes", "ElysionOrder");
                });

            modelBuilder.Entity("ElysionOrder.Domain.Entitys.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(1);

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(2);

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(3);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean")
                        .HasColumnOrder(7);

                    b.Property<Guid>("SubProductTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TenatId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(6);

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(4);

                    b.Property<Guid?>("UpdateUserId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("SubProductTypeId");

                    b.ToTable("Products", "ElysionOrder");
                });

            modelBuilder.Entity("ElysionOrder.Domain.Entitys.ProductType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(2);

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(3);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean")
                        .HasColumnOrder(7);

                    b.Property<Guid>("TenatId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(6);

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(4);

                    b.Property<Guid?>("UpdateUserId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.ToTable("ProductTypes", "ElysionOrder");
                });

            modelBuilder.Entity("ElysionOrder.Domain.Entitys.Right", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(2);

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(3);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean")
                        .HasColumnOrder(7);

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TenatId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(6);

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(4);

                    b.Property<Guid?>("UpdateUserId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.ToTable("Rights", "ElysionOrder");
                });

            modelBuilder.Entity("ElysionOrder.Domain.Entitys.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(2);

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(3);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean")
                        .HasColumnOrder(7);

                    b.Property<Guid>("TenatId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(6);

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(4);

                    b.Property<Guid?>("UpdateUserId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.ToTable("Roles", "ElysionOrder");
                });

            modelBuilder.Entity("ElysionOrder.Domain.Entitys.RoleRight", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(2);

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(3);

                    b.Property<Guid>("RightId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean")
                        .HasColumnOrder(7);

                    b.Property<Guid>("TenatId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(6);

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(4);

                    b.Property<Guid?>("UpdateUserId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("RightId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleRights", "ElysionOrder");
                });

            modelBuilder.Entity("ElysionOrder.Domain.Entitys.Route", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(2);

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(3);

                    b.Property<Guid>("DayOfWeekId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean")
                        .HasColumnOrder(7);

                    b.Property<Guid>("TenatId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(6);

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(4);

                    b.Property<Guid?>("UpdateUserId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("DayOfWeekId");

                    b.ToTable("Routes", "ElysionOrder");
                });

            modelBuilder.Entity("ElysionOrder.Domain.Entitys.RouteCustomer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(2);

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(3);

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RouteId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean")
                        .HasColumnOrder(7);

                    b.Property<Guid>("TenatId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(6);

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(4);

                    b.Property<Guid?>("UpdateUserId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("RouteId");

                    b.ToTable("RouteCustomers", "ElysionOrder");
                });

            modelBuilder.Entity("ElysionOrder.Domain.Entitys.RouteUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(2);

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(3);

                    b.Property<Guid>("RouteId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean")
                        .HasColumnOrder(7);

                    b.Property<Guid>("TenatId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(6);

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(4);

                    b.Property<Guid?>("UpdateUserId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(5);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RouteId");

                    b.HasIndex("UserId");

                    b.ToTable("RouteUsers", "ElysionOrder");
                });

            modelBuilder.Entity("ElysionOrder.Domain.Entitys.Sales", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(1);

                    b.Property<bool>("Bill")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(2);

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(3);

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SalesStatusId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean")
                        .HasColumnOrder(7);

                    b.Property<Guid>("TenatId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(6);

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(4);

                    b.Property<Guid?>("UpdateUserId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SalesStatusId");

                    b.ToTable("Saleses", "ElysionOrder");
                });

            modelBuilder.Entity("ElysionOrder.Domain.Entitys.SalesStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(2);

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(3);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("LineNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean")
                        .HasColumnOrder(7);

                    b.Property<Guid>("TenatId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(6);

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(4);

                    b.Property<Guid?>("UpdateUserId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.ToTable("SalesStatuses", "ElysionOrder");
                });

            modelBuilder.Entity("ElysionOrder.Domain.Entitys.Stock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(1);

                    b.Property<double>("BuyedPrice")
                        .HasColumnType("double precision");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(2);

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("DateOfEntry")
                        .HasColumnType("timestamp");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean")
                        .HasColumnOrder(7);

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TenatId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(6);

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(4);

                    b.Property<Guid?>("UpdateUserId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("StoreId");

                    b.ToTable("Stocks", "ElysionOrder");
                });

            modelBuilder.Entity("ElysionOrder.Domain.Entitys.Store", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(2);

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(3);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean")
                        .HasColumnOrder(7);

                    b.Property<Guid>("StoreTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TenatId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(6);

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(4);

                    b.Property<Guid?>("UpdateUserId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("StoreTypeId");

                    b.ToTable("Stores", "ElysionOrder");
                });

            modelBuilder.Entity("ElysionOrder.Domain.Entitys.StoreType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(2);

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(3);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean")
                        .HasColumnOrder(7);

                    b.Property<Guid>("TenatId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(6);

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(4);

                    b.Property<Guid?>("UpdateUserId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.ToTable("StoreTypes", "ElysionOrder");
                });

            modelBuilder.Entity("ElysionOrder.Domain.Entitys.SubProductType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(2);

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(3);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ProductTypeId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean")
                        .HasColumnOrder(7);

                    b.Property<Guid>("TenatId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(6);

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(4);

                    b.Property<Guid?>("UpdateUserId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("SubProductTypes", "ElysionOrder");
                });

            modelBuilder.Entity("ElysionOrder.Domain.Entitys.Tax", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(2);

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(3);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Rate")
                        .HasColumnType("integer");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean")
                        .HasColumnOrder(7);

                    b.Property<Guid>("TenatId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(6);

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(4);

                    b.Property<Guid?>("UpdateUserId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.ToTable("Taxes", "ElysionOrder");
                });

            modelBuilder.Entity("ElysionOrder.Domain.Entitys.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(2);

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(3);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LoginName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean")
                        .HasColumnOrder(7);

                    b.Property<Guid>("TenatId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(6);

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(4);

                    b.Property<Guid?>("UpdateUserId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(5);

                    b.Property<Guid>("UserTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserTypeId");

                    b.ToTable("Users", "ElysionOrder");
                });

            modelBuilder.Entity("ElysionOrder.Domain.Entitys.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(2);

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(3);

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean")
                        .HasColumnOrder(7);

                    b.Property<Guid>("TenatId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(6);

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(4);

                    b.Property<Guid?>("UpdateUserId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(5);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles", "ElysionOrder");
                });

            modelBuilder.Entity("ElysionOrder.Domain.Entitys.UserType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(2);

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(3);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean")
                        .HasColumnOrder(7);

                    b.Property<Guid>("TenatId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(6);

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(4);

                    b.Property<Guid?>("UpdateUserId")
                        .HasColumnType("uuid")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.ToTable("UserTypes", "ElysionOrder");
                });

            modelBuilder.Entity("ElysionOrder.Domain.Entitys.Bill", b =>
                {
                    b.HasOne("ElysionOrder.Domain.Entitys.BillType", "BillType")
                        .WithMany()
                        .HasForeignKey("BillTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElysionOrder.Domain.Entitys.Sales", "Sales")
                        .WithMany()
                        .HasForeignKey("SalesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BillType");

                    b.Navigation("Sales");
                });

            modelBuilder.Entity("ElysionOrder.Domain.Entitys.Customer", b =>
                {
                    b.HasOne("ElysionOrder.Domain.Entitys.CustomerType", "CustomerType")
                        .WithMany()
                        .HasForeignKey("CustomerTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerType");
                });

            modelBuilder.Entity("ElysionOrder.Domain.Entitys.Iban", b =>
                {
                    b.HasOne("ElysionOrder.Domain.Entitys.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("ElysionOrder.Domain.Entitys.Order", b =>
                {
                    b.HasOne("ElysionOrder.Domain.Entitys.PriceList", "PriceList")
                        .WithMany()
                        .HasForeignKey("PriceListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElysionOrder.Domain.Entitys.Sales", "Sales")
                        .WithMany()
                        .HasForeignKey("SalesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PriceList");

                    b.Navigation("Sales");
                });

            modelBuilder.Entity("ElysionOrder.Domain.Entitys.Payment", b =>
                {
                    b.HasOne("ElysionOrder.Domain.Entitys.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElysionOrder.Domain.Entitys.PaymentType", "PaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("PaymentType");
                });

            modelBuilder.Entity("ElysionOrder.Domain.Entitys.PriceList", b =>
                {
                    b.HasOne("ElysionOrder.Domain.Entitys.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElysionOrder.Domain.Entitys.PriceListType", "PriceListType")
                        .WithMany()
                        .HasForeignKey("PriceListTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElysionOrder.Domain.Entitys.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElysionOrder.Domain.Entitys.Tax", "Tax")
                        .WithMany()
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("PriceListType");

                    b.Navigation("Product");

                    b.Navigation("Tax");
                });

            modelBuilder.Entity("ElysionOrder.Domain.Entitys.Product", b =>
                {
                    b.HasOne("ElysionOrder.Domain.Entitys.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElysionOrder.Domain.Entitys.SubProductType", "SubProductType")
                        .WithMany()
                        .HasForeignKey("SubProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("SubProductType");
                });

            modelBuilder.Entity("ElysionOrder.Domain.Entitys.RoleRight", b =>
                {
                    b.HasOne("ElysionOrder.Domain.Entitys.Right", "Right")
                        .WithMany()
                        .HasForeignKey("RightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElysionOrder.Domain.Entitys.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Right");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ElysionOrder.Domain.Entitys.Route", b =>
                {
                    b.HasOne("ElysionOrder.Domain.Entitys.DayOfWeek", "DayOfWeek")
                        .WithMany()
                        .HasForeignKey("DayOfWeekId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DayOfWeek");
                });

            modelBuilder.Entity("ElysionOrder.Domain.Entitys.RouteCustomer", b =>
                {
                    b.HasOne("ElysionOrder.Domain.Entitys.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElysionOrder.Domain.Entitys.Route", "Route")
                        .WithMany()
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("ElysionOrder.Domain.Entitys.RouteUser", b =>
                {
                    b.HasOne("ElysionOrder.Domain.Entitys.Route", "Route")
                        .WithMany()
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElysionOrder.Domain.Entitys.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Route");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ElysionOrder.Domain.Entitys.Sales", b =>
                {
                    b.HasOne("ElysionOrder.Domain.Entitys.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElysionOrder.Domain.Entitys.SalesStatus", "SalesStatus")
                        .WithMany()
                        .HasForeignKey("SalesStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("SalesStatus");
                });

            modelBuilder.Entity("ElysionOrder.Domain.Entitys.Stock", b =>
                {
                    b.HasOne("ElysionOrder.Domain.Entitys.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElysionOrder.Domain.Entitys.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("ElysionOrder.Domain.Entitys.Store", b =>
                {
                    b.HasOne("ElysionOrder.Domain.Entitys.StoreType", "StoreType")
                        .WithMany()
                        .HasForeignKey("StoreTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoreType");
                });

            modelBuilder.Entity("ElysionOrder.Domain.Entitys.SubProductType", b =>
                {
                    b.HasOne("ElysionOrder.Domain.Entitys.ProductType", "ProductType")
                        .WithMany()
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("ElysionOrder.Domain.Entitys.User", b =>
                {
                    b.HasOne("ElysionOrder.Domain.Entitys.UserType", "UserType")
                        .WithMany()
                        .HasForeignKey("UserTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("ElysionOrder.Domain.Entitys.UserRole", b =>
                {
                    b.HasOne("ElysionOrder.Domain.Entitys.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElysionOrder.Domain.Entitys.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
